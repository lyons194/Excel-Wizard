"""

*Excel Wizard
*Version 0.0.1
*Contact:  Sean Lyons
*Email:  slyons494@gmail.com

"""

from tkinter import *
import os
from openpyxl import Workbook
from openpyxl import load_workbook
from openpyxl.utils import FORMULAE
from openpyxl.styles import colors
from openpyxl.styles import Font, Color
import time
from datetime import date

"""

Define memory variables

"""

workbook_memory = {}
notepad_memory = {}
save_memory = {}
cmd_memory = []
xlsx_upload = None
sheet = None


"""

Define Excel functions

"""

def exit_program():
    exit()

def new_xlsx_file():
    wb = Workbook()
    sheet = wb.active
    #20.0430:  Will need to create option for customized naming of this new file. 
    wb.save(filename="new.xlsx")

def read_cmd(x):
    cmd_holder = []
    try:
        if x.count("#") > 0:
            print("# detected")
        elif x.count(" ! ") == 0:
            print(f"Error detected: {x} -> Invalid command syntax.")
        elif x.count(" ! ") == 1:
            read_cmd_a = x.split(" ! ")
            read_cmd_b = read_cmd_a[1].split(";")
            for item in read_cmd_b:
                cmd_memory.append(item)
    except:
        print(f"Error detected: {x} -> Please review this command.")


"""

Put the code that creates the final .txt file report here.
Create a GUI check box that triggers the final report to be run.
Users can opt out of creating this final report.

def create_report():
    report_create = open(f'{workbook_memory["workbook"]}_report_{date.today()}_{time.time()}.txt','w')
    report_create.write(f'Report for {workbook_memory["workbook"]}\n{date.today()}\n{time.time()}\n\n')
    for line in reader.readlines():
        report_create.write(f"\n{notepad_memory['notepad']}:  New Command --> {line}\n")
        print(f"\n{notepad_memory['notepad']}:  New Command --> {line}\n", end="")


"""

#Menu functions.


def format_xlsx_file():
    xlsx_upload = load_workbook(filename=f"{workbook_memory['workbook']}")
    sheet = xlsx_upload.active
    with open(f"{notepad_memory['notepad']}", "r") as reader:
        copy_list = []
        copy_data = None
        font_style = Font(name="Calibri", size=11, color=colors.BLACK)
        print("\n\nIMPORTING COMMAND CRITERIA...\n\n")
        """

        Begin create report section.
        
        """
        report_create = open(f'{workbook_memory["workbook"]}_report_{date.today()}_{time.time()}.txt','w')
        report_create.write(f'Report for {workbook_memory["workbook"]}\n{date.today()}\n{time.time()}\n\n')
        report_create.write('\n\nFigures of note:  \n\n')
        for line in reader.readlines():
            report_create.write(f"\n{notepad_memory['notepad']}:  New Command --> {line}\n")
            print(f"\n{notepad_memory['notepad']}:  New Command --> {line}\n", end="")
            #Group column compare
            if line.count("group column compare") == 1:
                group_n = 1
                group_n_2 = 1
                temp_dict_1 = {}
                temp_dict_2 = {}
                temp_list_1 = []
                temp_list_2 = []
                temp_dict_index_1 = 0
                temp_dict_index_2 = 1
                read_cmd(line)
                for value in sheet.iter_rows(min_row=int(cmd_memory[0]),max_row=int(cmd_memory[1]),min_col=int(cmd_memory[2]),max_col=int(cmd_memory[3]),values_only=True):
                    temp_list_1.append(value[0])
                    temp_list_2.append(value[1])
                for item in enumerate(temp_list_2):
                    try:
                        print(f"{item}  -->  {temp_list_1[temp_dict_index_2]}")
                        if item[1] == temp_list_1[temp_dict_index_2]:
                            print("\n\n\nMatch!\n\n\n")
                            sheet[f"J{item[0]+1}"] = ""
                            sheet[f"J{item[0]+2}"] = ""
                        else:
                            print("\n\n\nNo Match.\n\n\n")
                        temp_dict_index_2 += 1
                    except:
                        print(f"An error occurred:  Exception item = {item}.")
                print("\n\n\n\n\n\n\n")
                cmd_memory.clear()

            #Reconcile
            elif line.count("reconcile") == 1:
                reconcile_temp_list = []
                prep_list = []
                read_cmd(line)
                for value in sheet.iter_rows(min_row=int(cmd_memory[0]),max_row=int(cmd_memory[1]),min_col=int(cmd_memory[2]),max_col=int(cmd_memory[3]), values_only=True):
                    if value == "":
                        reconcile_temp_list.append(f'{value} is a blank space.')
                    else:
                        reconcile_temp_list.append(value)
                for item in (reconcile_temp_list):
                    try:
                        convert_1 = str(item)
                        convert_2 = convert_1.replace("(", "")
                        convert_3 = convert_2.replace(")", "")
                        convert_4 = convert_3.replace(",", "")
                        convert_5 = float(convert_4)
                        prep_list.append(convert_5)
                    except:
                        pass
                prep_list.sort(reverse=True)
                for item in prep_list:
                    #try:
                    if item and -item in prep_list:
                        report_create.write(f"{item}\n")
                cmd_memory.clear()
            
            #create sheet
            elif line.count("create sheet") == 1:
                line_split = line.split(" ! ")
                auto_create_tab = xlsx_upload.create_sheet(f"{line_split[1]}")
            #change sheet
            elif line.count("change sheet") == 1:
                change_sheet_a = line.split(" ! ")
                change_sheet_b = change_sheet_a[1]
                for item in xlsx_upload.sheetnames:
                    try:
                        if item == change_sheet_b:
                            sheet = xlsx_upload[f"{item}"]
                    except:
                        print("\nError:  Sheet name not found.")    
            #Comment            
            elif line.count("#") == 1:
                pass

    #Auto-save.
        #for item in copy_list:
            #report_create.write(f"{item}\n")
        xlsx_upload.save(filename=f'{save_memory["saved_doc"]}_saved.xlsx')
        report_create.close()

"""

Define GUI variables

"""

root = Tk()

menu = Menu(root)
root.config(menu=menu)

file_menu = Menu(menu)
file_menu.add_command(label="Format .xlsx file", command=format_xlsx_file)
#file_menu.add_command(label="Export .txt to .xlsx file")
file_menu.add_command(label="Exit", command=exit_program)
menu.add_cascade(label="File", menu=file_menu)

create_menu = Menu(menu)
create_menu.add_command(label="New .xlsx file", command=new_xlsx_file)
create_menu.add_command(label="New .txt file")
menu.add_cascade(label="Create", menu=create_menu)

#Set directory
set_directory_entry = Entry(root)
set_directory_entry.place(x=25,y=25)
set_directory_entry.insert(0,"Sample: C:\\\\Users\\\\[username]")

show_directory_entry = Entry(root)
show_directory_entry.place(x=200,y=25)

label_directory_entry = Label(root,text="Directory Status:",fg="Blue")
label_directory_entry.place(x=200,y=50)

def callback1():
    callback_a = set_directory_entry.get()
    try:
        os.chdir(str(callback_a))
        print(os.getcwd())
        show_directory_entry.insert(0,"Success: path verified")
        label_directory_entry = Label(root,text="Directory Status:",fg="Green")
        label_directory_entry.place(x=200,y=50)
    except:
        print("Error: path not found.")
        show_directory_entry.insert(0,"Error: path not found")
        label_directory_entry = Label(root,text="Directory Status:",fg="Red")
        label_directory_entry.place(x=200,y=50)

set_directory_button = Button(root, text="Set Directory", width=15, command=callback1).place(x=25,y=50)

#Set .xlsx file.
set_xlsx_entry = Entry(root)
set_xlsx_entry.place(x=25,y=100)
set_xlsx_entry.insert(0,'Sample: "file.xlsx"')

show_xlsx_entry = Entry(root)
show_xlsx_entry.place(x=200,y=100)

label_xlsx_entry = Label(root,text="File Load Status:",fg="Blue")
label_xlsx_entry.place(x=200,y=125)


def callback2():
    workbook_memory["workbook"] = set_xlsx_entry.get()
    try:
        xlsx_upload = load_workbook(filename=f"{workbook_memory['workbook']}")
        show_xlsx_entry.insert(0,"Success: file loaded")
        label_xlsx_entry = Label(root,text="File Load Status:",fg="Green")
        label_xlsx_entry.place(x=200,y=125)
    except:
        show_xlsx_entry.insert(0,"Error: file not found")
        label_xlsx_entry = Label(root,text="File Load Status:",fg="Red")
        label_xlsx_entry.place(x=200,y=125)


set_xlsx_button = Button(root, text="Set .xlsx File", width=15, command=callback2).place(x=25,y=125)

#Set .txt file
set_txt_entry = Entry(root)
set_txt_entry.place(x=25,y=175)
set_txt_entry.insert(0,'Sample: "file.txt"')

show_txt_entry = Entry(root)
show_txt_entry.place(x=200,y=175)

label_txt_entry = Label(root,text="File Load Status:",fg="Blue")
label_txt_entry.place(x=200,y=200)


def callback3():
    notepad_memory["notepad"] = set_txt_entry.get()
    try:
        with open(f"{notepad_memory['notepad']}", "r") as reader:
            pass
        show_txt_entry.insert(0,"Success: file loaded")
        label_txt_entry = Label(root,text="File Load Status:",fg="Green")
        label_txt_entry.place(x=200,y=200)
    except:
        show_txt_entry.insert(0,"Error: file not found")
        label_txt_entry = Label(root,text="File Load Status:",fg="Red")
        label_txt_entry.place(x=200,y=200)

set_txt_button = Button(root, text="Set .txt File", width=15, command=callback3)
set_txt_button.place(x=25,y=200)


#Set save name entry
set_save_name_entry = Entry(root)
set_save_name_entry.place(x=25,y=250)
set_save_name_entry.insert(0,'Save .XLSX file as: ')


show_save_entry = Entry(root)
show_save_entry.place(x=200,y=250)


label_save_entry = Label(root,text="Save File As:",fg="Blue")
label_save_entry.place(x=200,y=275)


def callback4():
    save_memory["saved_doc"] = set_save_name_entry.get()
    try:
        show_save_entry.insert(0,f'{save_memory["saved_doc"]}')
        label_save_entry = Label(root,text="Save File As:",fg="Green")
        label_save_entry.place(x=200,y=275)
    except:
        pass


set_saved_button = Button(root, text="Save .XLSX as:", width=15, command=callback4).place(x=25,y=275)

company_notice = Label(root, text="CU Service Network Internal Software")

company_notice.place(x=5,y=377)

root.wm_title("Excel Wizard")

root.geometry("350x400")

root.resizable(False,False)

root.mainloop()






"""

*Excel Wizard
*Version 0.0.1
*Contact:  Sean Lyons
*Email:  slyons494@gmail.com

"""

"""

Import modules section

"""

from tkinter import *
import os
from openpyxl import Workbook
from openpyxl import load_workbook
from openpyxl.utils import FORMULAE
from openpyxl.styles import colors
from openpyxl.styles import Font, Color
import time
from datetime import date

"""

Define memory variables

"""

workbook_memory = {}
notepad_memory = {}
save_memory = {}
cmd_memory = []
xlsx_upload = None
sheet = None


"""

Define Excel functions

"""

def exit_program():
    exit()

def new_xlsx_file():
    wb = Workbook()
    sheet = wb.active
    #20.0430:  Will need to create option for customized naming of this new file. 
    wb.save(filename="new.xlsx")

def read_cmd(x):
    cmd_holder = []
    try:
        if x.count("#") > 0:
            print("# detected")
        elif x.count(" ! ") == 0:
            print(f"Error detected: {x} -> Invalid command syntax.")
        elif x.count(" ! ") == 1:
            read_cmd_a = x.split(" ! ")
            read_cmd_b = read_cmd_a[1].split(";")
            for item in read_cmd_b:
                cmd_memory.append(item)
    except:
        print(f"Error detected: {x} -> Please review this command.")


"""

Put the code that creates the final .txt file report here.
Create a GUI check box that triggers the final report to be run.
Users can opt out of creating this final report.

def create_report():
    report_create = open(f'{workbook_memory["workbook"]}_report_{date.today()}_{time.time()}.txt','w')
    report_create.write(f'Report for {workbook_memory["workbook"]}\n{date.today()}\n{time.time()}\n\n')
    for line in reader.readlines():
        report_create.write(f"\n{notepad_memory['notepad']}:  New Command --> {line}\n")
        print(f"\n{notepad_memory['notepad']}:  New Command --> {line}\n", end="")


"""

#Menu functions.


def format_xlsx_file():
    xlsx_upload = load_workbook(filename=f"{workbook_memory['workbook']}")
    sheet = xlsx_upload.active
    with open(f"{notepad_memory['notepad']}", "r") as reader:
        copy_list = []
        copy_data = None
        font_style = Font(name="Calibri", size=11, color=colors.BLACK)
        print("\n\nIMPORTING COMMAND CRITERIA...\n\n")
        """

        Begin create report section.
        
        """
        report_create = open(f'{workbook_memory["workbook"]}_report_{date.today()}_{time.time()}.txt','w')
        report_create.write(f'Report for {workbook_memory["workbook"]}\n{date.today()}\n{time.time()}\n\n')
        report_create.write('\n\nFigures of note:  \n\n')
        for line in reader.readlines():
            report_create.write(f"\n{notepad_memory['notepad']}:  New Command --> {line}\n")
            print(f"\n{notepad_memory['notepad']}:  New Command --> {line}\n", end="")
            #Group column compare
            if line.count("group column compare") == 1:
                group_n = 1
                group_n_2 = 1
                temp_dict_1 = {}
                temp_dict_2 = {}
                temp_list_1 = []
                temp_list_2 = []
                temp_dict_index_1 = 0
                temp_dict_index_2 = 1
                read_cmd(line)
                for value in sheet.iter_rows(min_row=int(cmd_memory[0]),max_row=int(cmd_memory[1]),min_col=int(cmd_memory[2]),max_col=int(cmd_memory[3]),values_only=True):
                    temp_list_1.append(value[0])
                    temp_list_2.append(value[1])
                for item in enumerate(temp_list_2):
                    try:
                        print(f"{item}  -->  {temp_list_1[temp_dict_index_2]}")
                        if item[1] == temp_list_1[temp_dict_index_2]:
                            print("\n\n\nMatch!\n\n\n")
                            sheet[f"J{item[0]+1}"] = ""
                            sheet[f"J{item[0]+2}"] = ""
                        else:
                            print("\n\n\nNo Match.\n\n\n")
                        temp_dict_index_2 += 1
                    except:
                        print(f"An error occurred:  Exception item = {item}.")
                print("\n\n\n\n\n\n\n")
                cmd_memory.clear()

            #Reconcile
            elif line.count("reconcile") == 1:
                reconcile_temp_list = []
                prep_list = []
                read_cmd(line)
                for value in sheet.iter_rows(min_row=int(cmd_memory[0]),max_row=int(cmd_memory[1]),min_col=int(cmd_memory[2]),max_col=int(cmd_memory[3]), values_only=True):
                    if value == "":
                        reconcile_temp_list.append(f'{value} is a blank space.')
                    else:
                        reconcile_temp_list.append(value)
                for item in (reconcile_temp_list):
                    try:
                        convert_1 = str(item)
                        convert_2 = convert_1.replace("(", "")
                        convert_3 = convert_2.replace(")", "")
                        convert_4 = convert_3.replace(",", "")
                        convert_5 = float(convert_4)
                        prep_list.append(convert_5)
                    except:
                        pass
                prep_list.sort(reverse=True)
                for item in prep_list:
                    #try:
                    if item and -item in prep_list:
                        report_create.write(f"{item}\n")
                cmd_memory.clear()
            
            #create sheet
            elif line.count("create sheet") == 1:
                line_split = line.split(" ! ")
                auto_create_tab = xlsx_upload.create_sheet(f"{line_split[1]}")
            #change sheet
            elif line.count("change sheet") == 1:
                change_sheet_a = line.split(" ! ")
                change_sheet_b = change_sheet_a[1]
                for item in xlsx_upload.sheetnames:
                    try:
                        if item == change_sheet_b:
                            sheet = xlsx_upload[f"{item}"]
                    except:
                        print("\nError:  Sheet name not found.")    
            #Comment            
            elif line.count("#") == 1:
                pass

    #Auto-save.
        #for item in copy_list:
            #report_create.write(f"{item}\n")
        xlsx_upload.save(filename=f'{save_memory["saved_doc"]}_saved.xlsx')
        report_create.close()

"""

Define GUI variables

"""

root = Tk()

menu = Menu(root)
root.config(menu=menu)

file_menu = Menu(menu)
file_menu.add_command(label="Format .xlsx file", command=format_xlsx_file)
#file_menu.add_command(label="Export .txt to .xlsx file")
file_menu.add_command(label="Exit", command=exit_program)
menu.add_cascade(label="File", menu=file_menu)

create_menu = Menu(menu)
create_menu.add_command(label="New .xlsx file", command=new_xlsx_file)
create_menu.add_command(label="New .txt file")
menu.add_cascade(label="Create", menu=create_menu)

#Set directory
set_directory_entry = Entry(root)
set_directory_entry.place(x=25,y=25)
set_directory_entry.insert(0,"Sample: C:\\\\Users\\\\[username]")

show_directory_entry = Entry(root)
show_directory_entry.place(x=200,y=25)

label_directory_entry = Label(root,text="Directory Status:",fg="Blue")
label_directory_entry.place(x=200,y=50)

def callback1():
    callback_a = set_directory_entry.get()
    try:
        os.chdir(str(callback_a))
        print(os.getcwd())
        show_directory_entry.insert(0,"Success: path verified")
        label_directory_entry = Label(root,text="Directory Status:",fg="Green")
        label_directory_entry.place(x=200,y=50)
    except:
        print("Error: path not found.")
        show_directory_entry.insert(0,"Error: path not found")
        label_directory_entry = Label(root,text="Directory Status:",fg="Red")
        label_directory_entry.place(x=200,y=50)

set_directory_button = Button(root, text="Set Directory", width=15, command=callback1).place(x=25,y=50)

#Set .xlsx file.
set_xlsx_entry = Entry(root)
set_xlsx_entry.place(x=25,y=100)
set_xlsx_entry.insert(0,'Sample: "file.xlsx"')

show_xlsx_entry = Entry(root)
show_xlsx_entry.place(x=200,y=100)

label_xlsx_entry = Label(root,text="File Load Status:",fg="Blue")
label_xlsx_entry.place(x=200,y=125)


def callback2():
    workbook_memory["workbook"] = set_xlsx_entry.get()
    try:
        xlsx_upload = load_workbook(filename=f"{workbook_memory['workbook']}")
        show_xlsx_entry.insert(0,"Success: file loaded")
        label_xlsx_entry = Label(root,text="File Load Status:",fg="Green")
        label_xlsx_entry.place(x=200,y=125)
    except:
        show_xlsx_entry.insert(0,"Error: file not found")
        label_xlsx_entry = Label(root,text="File Load Status:",fg="Red")
        label_xlsx_entry.place(x=200,y=125)


set_xlsx_button = Button(root, text="Set .xlsx File", width=15, command=callback2).place(x=25,y=125)

#Set .txt file
set_txt_entry = Entry(root)
set_txt_entry.place(x=25,y=175)
set_txt_entry.insert(0,'Sample: "file.txt"')

show_txt_entry = Entry(root)
show_txt_entry.place(x=200,y=175)

label_txt_entry = Label(root,text="File Load Status:",fg="Blue")
label_txt_entry.place(x=200,y=200)


def callback3():
    notepad_memory["notepad"] = set_txt_entry.get()
    try:
        with open(f"{notepad_memory['notepad']}", "r") as reader:
            pass
        show_txt_entry.insert(0,"Success: file loaded")
        label_txt_entry = Label(root,text="File Load Status:",fg="Green")
        label_txt_entry.place(x=200,y=200)
    except:
        show_txt_entry.insert(0,"Error: file not found")
        label_txt_entry = Label(root,text="File Load Status:",fg="Red")
        label_txt_entry.place(x=200,y=200)

set_txt_button = Button(root, text="Set .txt File", width=15, command=callback3)
set_txt_button.place(x=25,y=200)


#Set save name entry
set_save_name_entry = Entry(root)
set_save_name_entry.place(x=25,y=250)
set_save_name_entry.insert(0,'Save .XLSX file as: ')


show_save_entry = Entry(root)
show_save_entry.place(x=200,y=250)


label_save_entry = Label(root,text="Save File As:",fg="Blue")
label_save_entry.place(x=200,y=275)


def callback4():
    save_memory["saved_doc"] = set_save_name_entry.get()
    try:
        show_save_entry.insert(0,f'{save_memory["saved_doc"]}')
        label_save_entry = Label(root,text="Save File As:",fg="Green")
        label_save_entry.place(x=200,y=275)
    except:
        pass


set_saved_button = Button(root, text="Save .XLSX as:", width=15, command=callback4).place(x=25,y=275)

company_notice = Label(root, text="CU Service Network Internal Software")

company_notice.place(x=5,y=377)

root.wm_title("Excel Wizard")

root.geometry("350x400")

root.resizable(False,False)

root.mainloop()
